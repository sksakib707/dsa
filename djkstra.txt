#include <iostream>
#include <vector>
#include <limits.h>
using namespace std;

// Function to find the vertex with the minimum distance
int minDistance(vector<int>& dist, vector<bool>& sptSet, int V) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++)
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    return min_index;
}

// Function to print the solution
void printSolution(const vector<int>& dist, int V) {
    cout << "Vertex \t Distance from Source" << endl;
    for (int i = 0; i < V; i++)
        cout << i << " \t\t\t\t" << dist[i] << endl;
}

// Dijkstra's algorithm
void dijkstra(vector<vector<int>>& graph, int src, int V) {
    vector<int> dist(V, INT_MAX); // Distance array
    vector<bool> sptSet(V, false); // Processed vertices

    dist[src] = 0; // Distance of source to itself is 0

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet, V);
        sptSet[u] = true;

        for (int v = 0; v < V; v++)
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    printSolution(dist, V);
}

int main() {
    int V;
    cout << "Enter the number of vertices in the graph: ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V, 0));

    cout << "Enter the adjacency matrix of the graph (enter weights, use 0 if no edge exists):" << endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }

    int src;
    cout << "Enter the source vertex: ";
    cin >> src;

    dijkstra(graph, src, V);

    return 0;
}




     (0)
      |
      | 5
      |
     (1)
    /   \
  2/     \6
  /       \
(2)------(3)
     1


Enter the number of vertices in the graph: 4
Enter the adjacency matrix of the graph (enter weights, use 0 if no edge exists):
0 5 0 0
5 0 2 6
0 2 0 1
0 6 1 0
Enter the source vertex: 0


Vertex   Distance from Source
0        0
1        5
2        7
3        8

