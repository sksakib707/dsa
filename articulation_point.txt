#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 100; // Max number of nodes
vector<int> adj[N]; // Adjacency list for the graph
bool visited[N];  // Array to track visited nodes
int disc[N], low[N], parent[N];  // Arrays for discovery time, low values, and parent nodes
bool isArticulation[N];  // Array to mark articulation points
int timer = 0;  // Timer for discovery times

// Depth-First Search (DFS) function to find articulation points
void dfs(int u) {
    visited[u] = true;  // Mark the current node as visited
    disc[u] = low[u] = ++timer;  // Set discovery time and low value
    int children = 0;  // Count of children in the DFS tree

    // Explore all adjacent nodes of u
    for (int v : adj[u]) {
        // If v is not visited, perform DFS on v
        if (!visited[v]) {
            children++;  // Increase the number of children for u
            parent[v] = u;  // Set parent of v as u
            dfs(v);  // Recursive DFS call

            // After returning from v, update the low[u] value
            low[u] = min(low[u], low[v]);

            // Check if u is an articulation point:
            // Root node case: If u is root and has more than 1 child, it's an articulation point
            if (parent[u] == -1 && children > 1)
                isArticulation[u] = true;

            // Non-root node case: If low[v] >= disc[u], u is an articulation point
            if (parent[u] != -1 && low[v] >= disc[u])
                isArticulation[u] = true;
        }
        // Update the low value of u for back edge (u, v)
        else if (v != parent[u]) {
            low[u] = min(low[u], disc[v]);  // Update low[u] based on v's discovery time
        }
    }
}

// Function to find all articulation points in the graph
void findArticulationPoints(int n)
{
    // Reset visited, parent, and isArticulation arrays for the DFS traversal
    fill(visited, visited + n, false);
    fill(parent, parent + n, -1);
    fill(isArticulation, isArticulation + n, false);
    timer = 0;  // Reset the timer for discovery times

    // Perform DFS traversal from each unvisited node
    for (int i = 0; i < n; i++)
    {
        if (!visited[i])
            dfs(i);  // Start DFS if the node is unvisited
    }

    // Print all articulation points
    cout << "Articulation Points: ";
    for (int i = 0; i < n; i++)
    {
        if (isArticulation[i])  // If a node is an articulation point
            cout << i << " ";  // Print the articulation point
    }
    cout << endl;
}

int main()
{
    int n, e;
    cout << "Enter number of nodes and edges: ";
    cin >> n >> e;  // Input the number of nodes and edges

    cout << "Enter edges (u v): " << endl;
    // Input edges and build the adjacency list
    for (int i = 0; i < e; i++)
    {
        int u, v;
        cin >> u >> v;  // Input an edge from u to v
        adj[u].push_back(v);  // Add v to u's adjacency list
        adj[v].push_back(u);  // Add u to v's adjacency list (since it's an undirected graph)
    }

    // Find and print all articulation points in the graph
    findArticulationPoints(n);

    return 0;
}


Enter number of nodes and edges: 5 5
Enter edges (u v):
0 1
1 2
2 3
3 4
1 3

   0
   |
   1
  / \
 2   3
    / \
   4   2

Articulation Points: 1 3

